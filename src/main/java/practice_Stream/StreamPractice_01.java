package practice_Stream;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;


// 816p 스트림 기본
public class StreamPractice_01 {

    public static void main(String[] args) {
        String[] strArr = { "aaa" , "ddd", "ccc" };
        List<String> strList = Arrays.asList(strArr);

        Stream<String> strStream1 = strList.stream(); // 스트림을 생성
        Stream<String> strStream2 = Arrays.stream(strArr); // 스트림을 생성

        strStream1.sorted().forEach(System.out::println);
        strStream2.sorted().forEach( (r) -> {System.out.println();});
        // 한번 사용했으므로 사용불가
        //List<String> sortedList = strStream2.sorted().collect(Collectors.toList());
        //System.out.println(sortedList);

        String[] strArr2 = { "aaa" , "ddd", "ccc", "CC","b" };
        Stream<String> stream = Stream.of(strArr2); // 문자열 배열이 소스인 스트림
        //stream.sorted().forEach( (r)-> System.out.println(r) );
        //Stream<String> filteredStream = stream.filter(); // 걸러내기(중간연산)
        //Stream<String> distinctedStream = stream.distinct(); // 중복제거(중간 연산)
        Stream<String> sortedStream = stream.sorted(); // 정렬(중간 연산)
        Stream<String> limitedStream = stream.limit(5); // 스트림 자르기(중간 연산)
        long total = stream.count(); // 요소 개수 세기(최종 연산)


    }


}
/*
class Human{
    private Long idx;
    private String name;
    private Integer money;
    private LocalDate birth;
}
    (1, '2023-10-23 9:28', 401, '2023-11-01', '2023-11-03', '2023-11-01 9:00', '2023-11-03 12:00'),
            (2, '2023-10-24 0:28', 402, '2023-11-02', '2023-11-04', '2023-11-02 9:00', '2023-11-04 14:00'),
            (3, '2023-10-21 0:28', 403, '2023-11-05', '2023-11-07', '2023-11-05 8:30', '2023-11-07 11:30'),
            (4, '2023-10-21 14:28', 405, '2023-11-08', '2023-11-10', '2023-11-08 11:00', '2023-11-10 15:00'),
            (5, '2023-10-23 2:28', 406, '2023-11-11', '2023-11-13', '2023-11-11 9:30', '2023-11-13 13:30'),
            (6, '2023-10-24 14:55', 407, '2023-11-14', '2023-11-16', '2023-11-14 10:30', '2023-11-16 14:30'),
            (7, '2023-10-25 5:28', 510, '2023-11-17', '2023-11-19', '2023-11-17 8:00', '2023-11-19 12:00'),
            (8, '2023-10-18 10:28', 612, '2023-11-20', '2023-11-22', '2023-11-20 9:15', '2023-11-22 13:15'),
            (9, '2023-10-21 10:21', 713, '2023-11-23', '2023-11-25', '2023-11-23 11:00', '2023-11-25 15:00'),
            (10, '2023-10-22 7:28', 815, '2023-11-26', '2023-11-28', '2023-11-26 8:45', '2023-11-28 12:45'),
            (11, '2023-10-26 15:45', 510, '2023-11-04', '2023-11-06', '2023-11-04 10:00', '2023-11-06 13:00'),
            (12, '2023-10-27 9:12', 611, '2023-11-07', '2023-11-09', '2023-11-07 11:30', '2023-11-09 15:30'),
            (13, '2023-10-28 10:33', 604, '2023-11-10', '2023-11-12', '2023-11-10 9:15', '2023-11-12 13:15'),
            (14, '2023-10-29 14:17', 701, '2023-11-13', '2023-11-15', '2023-11-13 8:45', '2023-11-15 12:45'),
            (15, '2023-10-30 3:05', 604, '2023-11-16', '2023-11-18', '2023-11-16 10:30', '2023-11-18 14:30'),
            (16, '2023-10-31 6:59', 1011, '2023-11-19', '2023-11-21', '2023-11-19 9:00', '2023-11-21 12:00'),
            (17, '2023-11-01 2:37', 1013, '2023-11-22', '2023-11-24', '2023-11-22 8:30', '2023-11-24 11:30'),
            (18, '2023-11-02 7:18', 1012, '2023-11-25', '2023-11-27', '2023-11-25 11:00', '2023-11-27 15:00'),
            (19, '2023-11-03 12:14', 1013, '2023-11-28', '2023-11-30', '2023-11-28 9:30', '2023-11-30 13:30'),
            (20, '2023-11-04 8:29', 907, '2023-11-02', '2023-11-04', '2023-11-02 12:00', '2023-11-04 14:00');*/